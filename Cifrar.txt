Comando para compilar
 g++ -std=c++11 -lssl -lcrypto -pthread ArchivoCero.cpp Bitacora.cpp Cifrado.cpp Client.cpp Escritor.cpp Lector.cpp main.cpp ProcesadorFinal.cpp ProcesadorIntermediario.cpp ServerAlternativo.cpp ServerInicial.cpp Sha.cpp Socket.cpp
g++ -o cifrado Cifrado.cpp -lssl -lcrypto

Inicial:
./a.out 1 0 172.24.3.83 8283 172.24.3.84 8283 1 /home/manuel.arroyoportilla/priv 123A
Intermediario:
./a.out 0 0 
Final:
./a.out 0 1 172.24.3.83 8284 nada nada 1 /home/manuel.arroyoportilla/priv 123A

    Generate RSA key:

    $ openssl genrsa -out key.pem 4096 
    $ openssl rsa -in key.pem -text -noout

    Save public key in pub.pem file:

    $ openssl rsa -in key.pem -pubout -out pub.pem 
    $ openssl rsa -in pub.pem -pubin -text -noout 

    Encrypt some data:

    $ echo test test test > file.txt 
    $ openssl rsautl -encrypt -inkey pub.pem -pubin -in file.txt -out file.bin 

    Decrypt encrypted data:

    $ openssl rsautl -decrypt -inkey key.pem -in file.bin 


int main() {
    std::string message = "un patito muy feito, era muy queridito";
    std::string publicKeyPath = "/home/valery.murcia/In-secure/pub.pem";
    std::string privateKeyPath = "/home/valery.murcia/In-secure/key.pem";

    // Encriptar el mensaje
    std::string encryptedMessage = encryptMessage(message, publicKeyPath);

    if (encryptedMessage.empty()) {
        std::cerr << "Error al encriptar el mensaje" << std::endl;
        return 1;
    }

    std::cout << "Mensaje encriptado: " << encryptedMessage << std::endl;

    // Descifrar el mensaje
    std::string decryptedMessage = decryptMessage(encryptedMessage, privateKeyPath);

    if (decryptedMessage.empty()) {
        std::cerr << "Error al descifrar el mensaje" << std::endl;
        return 1;
    }

    std::cout << "Mensaje descifrado: " << decryptedMessage << std::endl;

    return 0;
}
